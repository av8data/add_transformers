name: Deploy Scala CI

on:
  push:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
    - uses: olafurpg/setup-scala@v5
      with:
        java-version: openjdk@1.11.0-6
    - run: git fetch --unshallow
    - run: git fetch origin +refs/tags/*:refs/tags/*
    - name: Cache SBT ivy cache
      uses: actions/cache@v1
      with:
        path: ~/.ivy2/cache
        key: ${{ runner.os }}-sbt-ivy-cache-${{ hashFiles('**/build.sbt') }}
    - name: Cache SBT
      uses: actions/cache@v1
      with:
        path: ~/.sbt
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
    - name: Run tests
      run: sbt +test
    - name: git tags
      run: git tag -l
    - name: git fetch tags
      run: git fetch --tags --verbose
    - name: git show ref tags
      run: git show-ref --tags
    - name: git set email
      run: git config --global user.email "av8dataci@av8data.com"
    - name: git set username
      run: git config --global user.name "Github CI"
    - name: git checkout master
      run: git checkout -f master
    - name: git log
      run: git log | head -1000
    - name: Configure GPG Key
      run: |
        mkdir -p ~/.gnupg/
        printf "$GPG_SIGNING_KEY" | base64 --decode > ~/.gnupg/private.key
        gpg --import ~/.gnupg/private.key
      env:
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

#    - name: create file
#      run: echo $PGP_SECRET > $HOME/secring.gpg
#      env:
#        PGP_SECRET: ${{ secrets.PGP_SECRET }}
#    - name: import secring
#      run: ls -l $HOME/secring.gpg;gpg --verbose --import $HOME/secring.gpg
    - name: release with-defaults
      run: sbt "release cross with-defaults"
      env:
        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        PGP_SECRET: ${{ secrets.PGP_SECRET }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
#    - name: publish
#      run: sbt publishSigned
#      env:
#        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
#        PGP_SECRET: ${{ secrets.PGP_SECRET }}
#        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
#        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
#    - name: sonatypeBundleRelease
#      run: sbt sonatypeBundleRelease
#      env:
#        PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
#        PGP_SECRET: ${{ secrets.PGP_SECRET }}
#        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
#        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}


